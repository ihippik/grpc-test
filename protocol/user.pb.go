// Code generated by protoc-gen-go.
// source: user.proto
// DO NOT EDIT!

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	User
	GetUserRequest
*/
package user

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type User struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email" json:"email,omitempty"`
	Id    int64  `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}

type GetUserRequest struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetUserRequest) Reset()         { *m = GetUserRequest{} }
func (m *GetUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetUserRequest) ProtoMessage()    {}

func init() {
}

// Client API for GetUser service

type GetUserClient interface {
	Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error)
}

type getUserClient struct {
	cc *grpc.ClientConn
}

func NewGetUserClient(cc *grpc.ClientConn) GetUserClient {
	return &getUserClient{cc}
}

func (c *getUserClient) Get(ctx context.Context, in *GetUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := grpc.Invoke(ctx, "/user.GetUser/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GetUser service

type GetUserServer interface {
	Get(context.Context, *GetUserRequest) (*User, error)
}

func RegisterGetUserServer(s *grpc.Server, srv GetUserServer) {
	s.RegisterService(&_GetUser_serviceDesc, srv)
}

func _GetUser_Get_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(GetUserRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(GetUserServer).Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _GetUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.GetUser",
	HandlerType: (*GetUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetUser_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
